#!/bin/bash
#
# GENSYN RL SWARM SETUP SCRIPT - UPDATED ACCORDING TO THE GUIDE
# This script automates the dependency installation and initial setup.
#
set -e # Exit immediately if a command exits with a non-zero status.

# === Configuration ===
TOTAL_STEPS=7
LOG_FILE="/tmp/gensyn_setup_log_$(date +%s).log"
WORK_DIR=~/work

# === Color and Formatting Definitions ===
GREEN=$(tput setaf 2 2>/dev/null) || GREEN=""
NC=$(tput sgr0 2>/dev/null) || NC=""
BOLD=$(tput bold 2>/dev/null) || BOLD=""
RED=$(tput setaf 1 2>/dev/null) || RED=""
YELLOW=$(tput setaf 3 2>/dev/null) || YELLOW=""

# === UI Functions ===
print_banner() {
    clear
    local color
    color=$(tput setaf 33)
    echo "$color"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     "
    echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     "
    echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     "
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo "${NC}"
    echo "${BOLD}üî• GENSYN RL SWARM - AUTO SETUP SCRIPT (GUIDE UPDATED) üî•${NC}"
    echo
}

print_main_progress() {
    local step=$1
    local progress=$(( (step * 100) / TOTAL_STEPS ))
    local filled_len=$(( (progress * 20) / 100 ))
    local empty_len=$(( 20 - filled_len ))
    local bar
    bar=$(printf "%${filled_len}s" | tr ' ' '‚ñà')$(printf "%${empty_len}s" | tr ' ' '‚îÄ')
    echo "Overall Progress: [${GREEN}${bar}${NC}] ${progress}%"
}

# === Core Logic Functions ===
handle_error() {
    local message="$1"
    local step="$2"
    # Ensure the sudo keep-alive loop is killed
    if [[ -n $SUDO_LOOP_PID ]]; then kill "$SUDO_LOOP_PID" 2>/dev/null; fi
    print_banner
    print_main_progress "${step}"
    printf "\n${RED}‚úñ ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: %s${NC}\n" "${message}"
    echo "--------------------------------------------------"
    echo "  ${BOLD}‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ (Error Details from ${LOG_FILE}):${NC}"
    echo "--------------------------------------------------"
    sed 's/^/    /' "${LOG_FILE}"
    echo "--------------------------------------------------"
    echo "${RED}‡§∏‡•á‡§ü‡§Ö‡§™ ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ä‡§™‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§†‡•Ä‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§${NC}"
    exit 1
}

run_with_loader() {
    local message="$1"
    local step="$2"
    local command_to_run="$3"
    eval "${command_to_run}" >> "${LOG_FILE}" 2>&1 &
    local pid=$!
    local spinner=("üåç" "üåé" "üåè")
    local i=0
    tput civis # Hide cursor
    while [ -d /proc/$pid ]; do
        print_banner
        print_main_progress "${step}"
        printf "\r%s... %s" "${message}" "${spinner[$i]}"
        i=$(( (i + 1) % ${#spinner[@]} ))
        sleep 0.2
    done
    tput cnorm # Show cursor
    wait $pid
    local exit_code=$?
    print_banner
    print_main_progress "${step}"
    if [ $exit_code -eq 0 ]; then
        printf "\r${GREEN}‚úî %s... ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü‡•§${NC}\n" "${message}"
        sleep 1
    else
        handle_error "${message}" "${step}"
    fi
}

# === Main Script Execution ===
main() {
    print_banner
    echo "${YELLOW}‡§Ø‡§π ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§®‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ü‡§∞ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ (sudo) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§ó‡•Ä‡•§${NC}"
    echo "‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§"
    sudo -v
    # Keep the sudo session alive in the background
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    SUDO_LOOP_PID=$!
    trap "kill $SUDO_LOOP_PID 2>/dev/null" EXIT
    echo "${GREEN}‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...${NC}"
    echo "‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§≤‡•â‡§ó ‡§á‡§∏ ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•á‡§ú‡•á ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á: ${LOG_FILE}"
    sleep 2

    # --- Step 1: System Update & Upgrade ---
    run_with_loader "[1/${TOTAL_STEPS}] ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§™‡•à‡§ï‡•á‡§ú ‡§Ö‡§™‡§°‡•á‡§ü ‡§î‡§∞ ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§ï‡§∞‡§®‡§æ" 1 \
        "sudo apt-get update -qq && sudo apt-get upgrade -y -qq"

    # --- Step 2: Install General Utilities ---
    run_with_loader "[2/${TOTAL_STEPS}] ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ø‡§§‡§æ‡§è‡§Å ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡§æ" 2 \
        "sudo apt-get install -y -qq screen curl iptables build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip"
        
    # --- Step 3: Install Python ---
    run_with_loader "[3/${TOTAL_STEPS}] Python 3, pip ‡§î‡§∞ venv ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡§æ" 3 \
        "sudo apt-get install -y -qq python3 python3-pip python3-venv python3-dev"

    # --- Step 4: Install Node.js (v22) and Yarn ---
    run_with_loader "[4/${TOTAL_STEPS}] Node.js v22 ‡§î‡§∞ Yarn ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡§æ" 4 \
        "curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - && \
        sudo apt-get install -y -qq nodejs && \
        sudo npm install -g yarn"

    # --- Step 5: Verify Versions ---
    run_with_loader "[5/${TOTAL_STEPS}] ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§®‡§æ" 5 \
        "node -v && yarn -v && python3 --version"
    
    # --- Step 6: Clone Gensyn Repository ---
    cd "$WORK_DIR"
    if [ -d "rl-swarm" ]; then
        print_banner
        print_main_progress 6
        echo "${YELLOW}‚úî [6/${TOTAL_STEPS}] 'rl-swarm' ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§ï‡•ç‡§≤‡•ã‡§®‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º ‡§∞‡§π‡§æ ‡§π‡•à‡•§${NC}"
        sleep 1
    else
        run_with_loader "[6/${TOTAL_STEPS}] Gensyn AI ‡§∞‡§ø‡§™‡•â‡§ú‡§ø‡§ü‡§∞‡•Ä ‡§ï‡•ç‡§≤‡•ã‡§® ‡§ï‡§∞‡§®‡§æ" 6 \
            "git clone https://github.com/gensyn-ai/rl-swarm/"
    fi
    
    # --- Step 7: Create Python Virtual Environment ---
    run_with_loader "[7/${TOTAL_STEPS}] Python ‡§µ‡§∞‡•ç‡§ö‡•Å‡§Ö‡§≤ ‡§è‡§®‡§µ‡§æ‡§Ø‡§∞‡§®‡§Æ‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§®‡§æ" 7 \
        "cd rl-swarm && python3 -m venv .venv"

    # --- Final Output ---
    print_banner
    print_main_progress ${TOTAL_STEPS}
    echo
    echo "${GREEN}${BOLD}‚úÖ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü! ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§Ö‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§${NC}"
    echo
    echo "${YELLOW}${BOLD}--- ‡§Ü‡§ó‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à (IMPORTANT) ---${NC}"
    echo "1. ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á, ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï ${BOLD}HuggingFace Access Token${NC} ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§ó‡•Ä‡•§"
    echo "   ‡§Ö‡§ó‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§®‡§æ‡§è‡§Ç: ${BOLD}https://huggingface.co/settings/tokens${NC}"
    echo "   ‡§ü‡•ã‡§ï‡§® ‡§¨‡§®‡§æ‡§§‡•á ‡§∏‡§Æ‡§Ø ${BOLD}'write' permission${NC} ‡§¶‡•á‡§®‡§æ ‡§® ‡§≠‡•Ç‡§≤‡•á‡§Ç‡•§"
    echo
    echo "2. ‡§Ö‡§¨, ‡§ü‡§∞‡•ç‡§Æ‡§ø‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡§ï‡•á ‡§ö‡§≤‡§æ‡§è‡§Ç:"
    echo "   (a) ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç:"
    echo "       ${GREEN}cd ~/work/rl-swarm${NC}"
    echo
    echo "   (b) ‡§®‡•ã‡§° ‡§ï‡•ã ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§∏‡•á‡§∂‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç:"
    echo "       ${GREEN}screen -S swarm${NC}"
    echo
    echo "   (c) ‡§Ö‡§¨, ‡§®‡•ã‡§° ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§è‡§Ç:"
    echo "       ${GREEN}./run_rl_swarm.sh${NC}"
    echo
    echo "   (‡§Ø‡§π ‡§Ü‡§™‡§∏‡•á ‡§Ü‡§™‡§ï‡§æ HuggingFace ‡§ü‡•ã‡§ï‡§® ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§ó‡§æ)‡•§"
    echo
    echo "   (d) ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§Ü‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (‡§§‡§æ‡§ï‡§ø ‡§®‡•ã‡§° ‡§ö‡§≤‡§§‡§æ ‡§∞‡§π‡•á), ‡§¶‡§¨‡§æ‡§è‡§Ç: ${BOLD}CTRL + A, ‡§´‡§ø‡§∞ D${NC}"
    echo "   ‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡§≤‡§æ‡§è‡§Ç: ${BOLD}screen -r swarm${NC}"
}

# Run the main function
main
