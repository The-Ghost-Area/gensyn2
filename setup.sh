#!/bin/bash
#
# GENSYN AUTO SETUP SCRIPT - FINAL ROBUST VERSION
# This version handles the sudo password prompt correctly from the start.
#
set -e # Exit immediately if a command exits with a non-zero status.

# === Configuration ===
TOTAL_STEPS=6
LOG_FILE="/tmp/gensyn_setup_log_$(date +%s).log"
WORK_DIR=~/work

# Clean up old log files to prevent them from piling up
find /tmp -name "gensyn_setup_log_*.log" -mmin +60 -delete > /dev/null 2>&1

# === Color and Formatting Definitions ===
GREEN=$(tput setaf 2 2>/dev/null) || GREEN=""
NC=$(tput sgr0 2>/dev/null) || NC=""
BOLD=$(tput bold 2>/dev/null) || BOLD=""
RED=$(tput setaf 1 2>/dev/null) || RED=""
YELLOW=$(tput setaf 3 2>/dev/null) || YELLOW=""

# === UI Functions ===
print_banner() {
    clear
    local color
    color=$(tput setaf ${colors[$RANDOM % ${#colors[@]}]})
    echo "$color"
    echo "тЦИтЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтХЧ   тЦИтЦИтХЧтЦИтЦИтХЧтЦИтЦИтХЧ     "
    echo "тЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХСтЦИтЦИтХС     "
    echo "тЦИтЦИтХС  тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХСтЦИтЦИтХС     "
    echo "тЦИтЦИтХС  тЦИтЦИтХСтЦИтЦИтХФтХРтХРтХЭ  тХЪтЦИтЦИтХЧ тЦИтЦИтХФтХЭтЦИтЦИтХСтЦИтЦИтХС     "
    echo "тЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧ тХЪтЦИтЦИтЦИтЦИтХФтХЭ тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧ"
    echo "тХЪтХРтХРтХРтХРтХРтХЭ тХЪтХРтХРтХРтХРтХРтХРтХЭ  тХЪтХРтХРтХРтХЭ  тХЪтХРтХЭтХЪтХРтХРтХРтХРтХРтХРтХЭ"
    echo "${NC}"
    echo "${BOLD}ЁЯФе GENSYN AUTO SETUP SCRIPT (ROBUST VERSION) ЁЯФе${NC}"
    echo
}

print_main_progress() {
    local step=$1
    local progress=$(( (step * 100) / TOTAL_STEPS ))
    local filled_len=$(( (progress * 20) / 100 ))
    local empty_len=$(( 20 - filled_len ))
    local bar
    bar=$(printf "%${filled_len}s" | tr ' ' 'тЦИ')$(printf "%${empty_len}s" | tr ' ' 'тФА')
    echo "Overall Progress: [${GREEN}${bar}${NC}] ${progress}%"
}

# === Core Logic Functions ===
handle_error() {
    local message="$1"
    local step="$2"

    # Ensure the sudo keep-alive loop is killed
    if [[ -n $SUDO_LOOP_PID ]]; then
        kill "$SUDO_LOOP_PID" 2>/dev/null
    fi

    print_banner
    print_main_progress "${step}"
    printf "\n${RED}тЬЦ рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: %s${NC}\n" "${message}"
    echo "--------------------------------------------------"
    echo "  ${BOLD}рддреНрд░реБрдЯрд┐ рдХрд╛ рд╡рд┐рд╡рд░рдг (Error Details from ${LOG_FILE}):${NC}"
    echo "--------------------------------------------------"
    # Indent the log output for readability
    sed 's/^/    /' "${LOG_FILE}"
    echo "--------------------------------------------------"
    echo "${RED}рд╕реЗрдЯрдЕрдк рдмрдВрдж рд╣реЛ рд░рд╣рд╛ рд╣реИред рдХреГрдкрдпрд╛ рдКрдкрд░ рджреА рдЧрдИ рддреНрд░реБрдЯрд┐ рдХреЛ рдареАрдХ рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред${NC}"
    exit 1
}

run_with_loader() {
    local message="$1"
    local step="$2"
    local command_to_run="$3"
    
    # Run command in the background, redirecting stdout/stderr to the log file
    eval "${command_to_run}" >> "${LOG_FILE}" 2>&1 &
    local pid=$!
    local spinner=("ЁЯМН" "ЁЯМО" "ЁЯМП")
    local i=0
    
    tput civis # Hide cursor
    while [ -d /proc/$pid ]; do
        print_banner
        print_main_progress "${step}"
        printf "\r%s... %s" "${message}" "${spinner[$i]}"
        i=$(( (i + 1) % ${#spinner[@]} ))
        sleep 0.2
    done
    tput cnorm # Show cursor
    
    wait $pid
    local exit_code=$?
    
    print_banner
    print_main_progress "${step}"
    if [ $exit_code -eq 0 ]; then
        printf "\r${GREEN}тЬФ %s... рдкреВрд░рд╛ рд╣реБрдЖред${NC}\n" "${message}"
        sleep 1
    else
        handle_error "${message}" "${step}"
    fi
}

# === Main Script Execution ===
main() {
    print_banner
    
    # --- SUDO PASSWORD PRE-AUTHENTICATION ---
    echo "${YELLOW}рдпрд╣ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЗрдВрд╕реНрдЯреЙрд▓реЗрд╢рди рдХреЗ рд▓рд┐рдП рдПрдбрдорд┐рдирд┐рд╕реНрдЯреНрд░реЗрдЯрд░ рдЕрдзрд┐рдХрд╛рд░ (sudo) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдЧреАред${NC}"
    echo "рдХреГрдкрдпрд╛ рдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рдПрдХ рдмрд╛рд░ рджрд░реНрдЬ рдХрд░реЗрдВред"
    sudo -v
    
    # Keep the sudo session alive in the background
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    SUDO_LOOP_PID=$!
    # Ensure the keep-alive loop is killed on script exit
    trap "kill $SUDO_LOOP_PID 2>/dev/null" EXIT

    echo "${GREEN}рдзрдиреНрдпрд╡рд╛рдж! рд╕реЗрдЯрдЕрдк рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...${NC}"
    echo "рд╕рднреА рд╡рд┐рд╕реНрддреГрдд рд▓реЙрдЧ рдЗрд╕ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рд╕рд╣реЗрдЬреЗ рдЬрд╛рдПрдВрдЧреЗ: ${LOG_FILE}"
    sleep 2

    # --- Step 0: Go to work directory ---
    echo "рдХрд╛рд░реНрдпрд╢реАрд▓ рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА ${WORK_DIR} рдореЗрдВ рдЬрд╛ рд░рд╣рд╛ рд╣реИ..."
    mkdir -p "${WORK_DIR}"
    cd "${WORK_DIR}"
    echo "рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдореЗрдВ: $(pwd)"
    sleep 1

    # --- Steps 1-4 (Unchanged) ---
    run_with_loader "[1/${TOTAL_STEPS}] рд╕рд┐рд╕реНрдЯрдо рдЕрдкрдбреЗрдЯ рдФрд░ рдмреЗрд╕ рдкреИрдХреЗрдЬ рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░рдирд╛" 1 \
        "sudo apt-get update -qq && sudo apt-get install -y -qq sudo python3 python3-venv python3-pip curl wget screen git lsof nano unzip iproute2 build-essential gcc g++"

    run_with_loader "[2/${TOTAL_STEPS}] CUDA рд╕реЗрдЯрдЕрдк рдбрд╛рдЙрдирд▓реЛрдб рдФрд░ рдЪрд▓рд╛рдирд╛" 2 \
        "rm -f cuda.sh && curl -s -o cuda.sh https://raw.githubusercontent.com/zunxbt/gensyn-testnet/main/cuda.sh && chmod +x cuda.sh && bash ./cuda.sh"

    run_with_loader "[3/${TOTAL_STEPS}] Node.js рдФрд░ Yarn рд╕реЗрдЯрдЕрдк рдХрд░рдирд╛" 3 \
        "curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && \
        sudo apt-get update -qq && sudo apt-get install -y -qq nodejs && \
        sudo mkdir -p /etc/apt/keyrings && \
        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/yarn.gpg && \
        echo 'deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian stable main' | sudo tee /etc/apt/sources.list.d/yarn.list && \
        sudo apt-get update -qq && sudo apt-get install -y -qq yarn"

    run_with_loader "[4/${TOTAL_STEPS}] рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд┐рдП рдЧрдП рд╕рдВрд╕реНрдХрд░рдгреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдирд╛" 4 \
        "node -v && npm -v && yarn -v && python3 --version"

    # --- Step 5: Clone Gensyn Project ---
    if [ -d "rl-swarm" ]; then
        print_banner
        print_main_progress 5
        echo "${GREEN}тЬФ [5/${TOTAL_STEPS}] 'rl-swarm' рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИ, рдХреНрд▓реЛрдирд┐рдВрдЧ рдХреЛ рдЫреЛрдбрд╝ рд░рд╣рд╛ рд╣реИред${NC}"
        sleep 1
    else
        run_with_loader "[5/${TOTAL_STEPS}] Gensyn AI рд░рд┐рдкреЙрдЬрд┐рдЯрд░реА рдХреНрд▓реЛрди рдХрд░рдирд╛" 5 \
            "git clone --quiet https://github.com/gensyn-ai/rl-swarm.git"
    fi

    # === MODIFIED Step 6: Setup Base Environment and run 'yarn install' ONLY ===
    print_banner
    print_main_progress 6
    echo "[6/${TOTAL_STEPS}] рдмреЗрд╕ рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╕реЗрдЯрдЕрдк рдФрд░ Yarn рдкреИрдХреЗрдЬ рдЗрдВрд╕реНрдЯреЙрд▓ рдХрд░рдирд╛..."

    (
        cd rl-swarm || { echo "${RED}Error: 'rl-swarm' рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдирд╣реАрдВ рдорд┐рд▓реА!${NC}"; exit 1; }
        
        echo "тЮбя╕П  Python рд╡рд░реНрдЪреБрдЕрд▓ рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рдмрдирд╛ рд░рд╣рд╛ рд╣реИ..."
        python3 -m venv .venv >> "${LOG_FILE}" 2>&1 || { echo "${RED}Python venv рдмрдирд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред${NC}"; exit 1; }
        echo "тЬЕ Python рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ 'rl-swarm/.venv' рдореЗрдВ рдмрди рдЧрдпрд╛ рд╣реИред"

        (
            cd modal-login || { echo "${RED}Error: 'modal-login' рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдирд╣реАрдВ рдорд┐рд▓реА!${NC}"; exit 1; }
            
            echo "тЮбя╕П  ${BOLD}'yarn install' рдЪрд▓рд╛ рд░рд╣рд╛ рд╣реИ... рдЗрд╕рдореЗрдВ рдХреБрдЫ рдорд┐рдирдЯ рд▓рдЧ рд╕рдХрддреЗ рд╣реИрдВред рд▓рд╛рдЗрд╡ рдЖрдЙрдЯрдкреБрдЯ рдиреАрдЪреЗ рджреЗрдЦреЗрдВред${NC}"
            yarn install
        )
    )
    if [ $? -ne 0 ]; then
        echo "The 'yarn install' process failed. Please check the output above for errors." >> "${LOG_FILE}"
        handle_error "'yarn install' рд╡рд┐рдлрд▓ рд░рд╣рд╛" 6
    fi
    
    echo "${GREEN}тЬФ Yarn install рдкреВрд░рд╛ рд╣реБрдЖред${NC}"
    sleep 2
    
    # --- Final Output ---
    print_banner
    print_main_progress ${TOTAL_STEPS}
    echo
    echo "${GREEN}${BOLD}тЬЕ рдмреЗрд╕ рд╕реЗрдЯрдЕрдк рдкреВрд░рд╛ рд╣реБрдЖ!${NC}"
    echo "рд░рд┐рдкреЙрдЬрд┐рдЯрд░реА рдХреНрд▓реЛрди рд╣реЛ рдЧрдИ рд╣реИ рдФрд░ рд╢реБрд░реБрдЖрддреА рдирд┐рд░реНрднрд░рддрд╛рдПрдБ рдЗрдВрд╕реНрдЯреЙрд▓ рд╣реЛ рдЧрдИ рд╣реИрдВред"
    echo
    echo "${BOLD}--- рдЖрдЧреЗ рдХреНрдпрд╛ рдХрд░реЗрдВ ---${NC}"
    echo "1. рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдореЗрдВ рдЬрд╛рдПрдВ:"
    echo "   ${GREEN}cd ~/work/rl-swarm${NC}"
    echo "2. Python рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рдХреЛ рд╕рдХреНрд░рд┐рдп (activate) рдХрд░реЗрдВ:"
    echo "   ${GREEN}source .venv/bin/activate${NC}"
    echo "3. рдЕрдм рдЖрдк рдкреНрд░реЛрдЬреЗрдХреНрдЯ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ ./run_rl_swarm.sh)"
    echo
}

# Run the main function
main
